{"version":3,"sources":["features/counter-redux-toolkit/counterSlice.js","features/counter-redux-toolkit/Counter.js","features/counter-context/reducer.js","features/counter-context/counterContext.js","features/counter-context/Counter.js","features/counter-redux/store.js","features/counter-redux/reducer.js","features/counter-redux/Counter.js","features/counter-redux-toolkit/store.js","App.js","index.js","features/Counter.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","Counter","count","useSelector","counter","dispatch","useDispatch","className","styles","button","aria-label","onClick","reducer","type","CounterContext","createContext","CounterProvider","children","useReducer","Provider","useContext","store","createStore","configureStore","counterReducer","App","storeReduxToolkit","GlobalCountReduxToolkit","GlobalContextCount","storeRedux","GlobalCountRedux","rootElement","document","getElementById","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.f2474e6c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 0\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    }\r\n  }\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { decrement, increment } from \"./counterSlice\";\r\nimport styles from \"../Counter.module.css\";\r\n\r\nexport function Counter() {\r\n  const count = useSelector((state) => state.counter.value);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          Increment\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          Decrement\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"increase\": {\r\n      return {\r\n        ...state,\r\n        count: state.count + 1\r\n      };\r\n    }\r\n    case \"decrease\": {\r\n      return {\r\n        ...state,\r\n        count: state.count - 1\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const initialState = {\r\n  count: 0\r\n};\r\n","// Insprired by https://labs.thisdot.co/blog/creating-a-global-state-with-react-hooks\r\n\r\nimport { createContext, useReducer } from \"react\";\r\nimport { reducer, initialState } from \"./reducer\";\r\n\r\nexport const CounterContext = createContext({\r\n  state: initialState,\r\n  dispatch: () => null\r\n});\r\n\r\nexport const CounterProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <CounterContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </CounterContext.Provider>\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\nimport styles from \"../Counter.module.css\";\r\nimport { CounterContext } from \"./counterContext\";\r\n\r\nexport function Counter() {\r\n  const [state, dispatch] = useContext(CounterContext);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch({ type: \"increase\" })}\r\n        >\r\n          Increment\r\n        </button>\r\n        <span className={styles.value}>{state.count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch({ type: \"decrease\" })}\r\n        >\r\n          Decrement\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","export default (state = { count: 0 }, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return {\r\n        ...state,\r\n        count: state.count + 1\r\n      };\r\n    case \"DECREMENT\":\r\n      return {\r\n        ...state,\r\n        count: state.count - 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styles from \"../Counter.module.css\";\r\nimport store from \"./store\";\r\n\r\nexport function Counter() {\r\n  const count = useSelector((state) => state.count);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => store.dispatch({ type: \"INCREMENT\" })}\r\n        >\r\n          Increment\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => store.dispatch({ type: \"DECREMENT\" })}\r\n        >\r\n          Decrement\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./counterSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer\r\n  }\r\n});\r\n","import { useContext } from \"react\";\nimport \"./styles.css\";\nimport { Counter } from \"./features/counter-redux-toolkit/Counter\";\nimport { Counter as Counter2 } from \"./features/counter-context/Counter\";\nimport { CounterContext } from \"./features/counter-context/counterContext\";\nimport { Counter as CounterRedux } from \"./features/counter-redux/Counter\";\nimport { Provider, useSelector } from \"react-redux\";\nimport storeRedux from \"./features/counter-redux/store\";\nimport storeReduxToolkit from \"./features/counter-redux-toolkit/store\";\nimport { CounterProvider } from \"./features/counter-context/counterContext\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>React State Managment Experiment</h1>\n      <div>This demo includes: Redux, Redux Toolkit, React ContextAPI</div>\n\n      <Provider store={storeReduxToolkit}>\n        <div className=\"section\">\n          Counter with Redux Toolkit\n          <Counter />\n          Global state: <GlobalCountReduxToolkit />\n        </div>\n      </Provider>\n\n      <CounterProvider>\n        <div className=\"section\">\n          Counter with ContextAPI + Hook\n          <Counter2 />\n          Global state: <GlobalContextCount />\n        </div>\n      </CounterProvider>\n\n      <Provider store={storeRedux}>\n        <div className=\"section\">\n          Counter with ContextAPI + Hook\n          <CounterRedux />\n          Global state: <GlobalCountRedux />\n        </div>\n      </Provider>\n    </div>\n  );\n}\n\nfunction GlobalContextCount() {\n  const [counterState] = useContext(CounterContext);\n  return counterState.count;\n}\n\nfunction GlobalCountRedux() {\n  const count = useSelector((state) => state.count);\n  return count;\n}\n\nfunction GlobalCountReduxToolkit() {\n  const count = useSelector((state) => state.counter.value);\n  return count;\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Counter_value__3fU3W\",\"button\":\"Counter_button__1Fh_q\"};"],"sourceRoot":""}